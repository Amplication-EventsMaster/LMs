/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Failing } from "./Failing";
import { FailingCountArgs } from "./FailingCountArgs";
import { FailingFindManyArgs } from "./FailingFindManyArgs";
import { FailingFindUniqueArgs } from "./FailingFindUniqueArgs";
import { CreateFailingArgs } from "./CreateFailingArgs";
import { UpdateFailingArgs } from "./UpdateFailingArgs";
import { DeleteFailingArgs } from "./DeleteFailingArgs";
import { FailingService } from "../failing.service";
@graphql.Resolver(() => Failing)
export class FailingResolverBase {
  constructor(protected readonly service: FailingService) {}

  async _failingsMeta(
    @graphql.Args() args: FailingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Failing])
  async failings(
    @graphql.Args() args: FailingFindManyArgs
  ): Promise<Failing[]> {
    return this.service.failings(args);
  }

  @graphql.Query(() => Failing, { nullable: true })
  async failing(
    @graphql.Args() args: FailingFindUniqueArgs
  ): Promise<Failing | null> {
    const result = await this.service.failing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Failing)
  async createFailing(
    @graphql.Args() args: CreateFailingArgs
  ): Promise<Failing> {
    return await this.service.createFailing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Failing)
  async updateFailing(
    @graphql.Args() args: UpdateFailingArgs
  ): Promise<Failing | null> {
    try {
      return await this.service.updateFailing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Failing)
  async deleteFailing(
    @graphql.Args() args: DeleteFailingArgs
  ): Promise<Failing | null> {
    try {
      return await this.service.deleteFailing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
