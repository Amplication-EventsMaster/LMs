/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Failing as PrismaFailing } from "@prisma/client";

export class FailingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FailingCountArgs, "select">): Promise<number> {
    return this.prisma.failing.count(args);
  }

  async failings<T extends Prisma.FailingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailingFindManyArgs>
  ): Promise<PrismaFailing[]> {
    return this.prisma.failing.findMany<Prisma.FailingFindManyArgs>(args);
  }
  async failing<T extends Prisma.FailingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailingFindUniqueArgs>
  ): Promise<PrismaFailing | null> {
    return this.prisma.failing.findUnique(args);
  }
  async createFailing<T extends Prisma.FailingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailingCreateArgs>
  ): Promise<PrismaFailing> {
    return this.prisma.failing.create<T>(args);
  }
  async updateFailing<T extends Prisma.FailingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailingUpdateArgs>
  ): Promise<PrismaFailing> {
    return this.prisma.failing.update<T>(args);
  }
  async deleteFailing<T extends Prisma.FailingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailingDeleteArgs>
  ): Promise<PrismaFailing> {
    return this.prisma.failing.delete(args);
  }
}
